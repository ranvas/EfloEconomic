// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SqlLiteDataAccess;

#nullable disable

namespace SqlLiteDataAccess.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("MoneyEntity.Dto.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("account_id");

                    b.Property<string>("Table")
                        .HasColumnType("TEXT");

                    b.Property<long>("TgId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("telegram_id");

                    b.Property<string>("TgName")
                        .HasColumnType("TEXT")
                        .HasColumnName("telegram_name");

                    b.Property<string>("WalletCode")
                        .HasColumnType("TEXT")
                        .HasColumnName("wallet_code");

                    b.HasKey("Id");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("MoneyEntity.Dto.Transfer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("transfer_id");

                    b.Property<long>("AccountFromId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("account_from_id");

                    b.Property<long>("AccountToId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("account_to_id");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("TEXT")
                        .HasColumnName("transfer_code");

                    b.Property<decimal>("CurrencyValue")
                        .HasColumnType("TEXT")
                        .HasColumnName("currency_value");

                    b.Property<string>("Table")
                        .HasColumnType("TEXT");

                    b.Property<string>("TransferTime")
                        .HasColumnType("TEXT")
                        .HasColumnName("transfer_time");

                    b.HasKey("Id");

                    b.HasIndex("AccountFromId");

                    b.HasIndex("AccountToId");

                    b.ToTable("transfers", (string)null);
                });

            modelBuilder.Entity("MoneyEntity.Dto.Transfer", b =>
                {
                    b.HasOne("MoneyEntity.Dto.Account", "AccountFrom")
                        .WithMany("TransfersFrom")
                        .HasForeignKey("AccountFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoneyEntity.Dto.Account", "AccountTo")
                        .WithMany("TransfersTo")
                        .HasForeignKey("AccountToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountFrom");

                    b.Navigation("AccountTo");
                });

            modelBuilder.Entity("MoneyEntity.Dto.Account", b =>
                {
                    b.Navigation("TransfersFrom");

                    b.Navigation("TransfersTo");
                });
#pragma warning restore 612, 618
        }
    }
}
